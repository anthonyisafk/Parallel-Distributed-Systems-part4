#LyX 2.3 created this file. For more info see http://www.lyx.org/
\lyxformat 544
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass article
\begin_preamble
% Template for ICASSP-2021 paper; to be used with:
%          spconf.sty  - ICASSP/ICIP LaTeX style file, and
%          IEEEbib.bst - IEEE bibliography style file.
% --------------------------------------------------------------------------
\usepackage{spconf}


% Example definitions.
% --------------------
\def\x{{\mathbf x}}
\def\L{{\cal L}}

% Title.
% ------
\title{AUTHOR GUIDELINES FOR ICASSP 2021 PROCEEDINGS MANUSCRIPTS}
%
% Single address.
% ---------------
\name{Author(s) Name(s)\thanks{Thanks to XYZ agency for funding.}}
\address{Author Affiliation(s)}
%
% For example:
% ------------
%\address{School\\
%	Department\\
%	Address}
%
% Two addresses (uncomment and modify for two-address case).
% ----------------------------------------------------------
%\twoauthors
%  {A. Author-one, B. Author-two\sthanks{Thanks to XYZ agency for funding.}}
%	{School A-B\\
%	Department A-B\\
%	Address A-B}
%  {C. Author-three, D. Author-four\sthanks{The fourth author performed the work
%	while at ...}}
%	{School C-D\\
%	Department C-D\\
%	Address C-D}
%
\end_preamble
\use_default_options false
\maintain_unincluded_children false
\language english
\language_package none
\inputencoding auto
\fontencoding default
\font_roman "default" "default"
\font_sans "default" "default"
\font_typewriter "default" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\use_microtype false
\use_dash_ligatures true
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_package amsmath 2
\use_package amssymb 0
\use_package cancel 0
\use_package esint 1
\use_package mathdots 0
\use_package mathtools 0
\use_package mhchem 0
\use_package stackrel 0
\use_package stmaryrd 0
\use_package undertilde 0
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 0
\use_minted 0
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\is_math_indent 0
\math_numbering_side default
\quotes_style english
\dynamic_quotes 0
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

%
\backslash
ninept
\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
title{Parallel and Distributed Systems: Comparing pthreads, openCilk and
 Multicilk}
\end_layout

\begin_layout Plain Layout

 
\backslash
twoauthors{Antoniou Antonios
\end_layout

\begin_layout Plain Layout

                     }
\end_layout

\begin_layout Plain Layout

                        {Aristotle University of Thessaloniki 
\backslash

\backslash
        
\end_layout

\begin_layout Plain Layout

							9482
\end_layout

\begin_layout Plain Layout

                           }
\end_layout

\begin_layout Plain Layout

                         {Kaimakamidis Anestis}
\end_layout

\begin_layout Plain Layout

                          {Aristotle University of Thessaloniki 
\backslash

\backslash

\end_layout

\begin_layout Plain Layout

                           9627} 
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout


\backslash
maketitle
\end_layout

\begin_layout Plain Layout

        
\end_layout

\end_inset


\end_layout

\begin_layout Section
INTRODUCTION
\end_layout

\begin_layout Subsection
Symmetric Multiprocessing (SMP)
\end_layout

\begin_layout Standard
Symmetric Multiprocessing, or SMP, is a programming paradigm meant for distribut
ing a program’s workload across a machine’s threads, instead of the sequential
 execution of instructions, in the expense of added source code complexity.
 The concurrent processing is realized by the use of both shared and private
 entities in the context of each thread.
 In this paper, we will be taking a closer look at three ways of setting
 up a piece of SMP software: pthreads, openCilk and Multicilk.
 
\end_layout

\begin_layout Standard
However, before getting into detail, it’s crucial that we clear up some
 terminology and basics of SMP.
 Since some of the variables -or more generally memory regions- are shared
 between threads (can be interchangeably called “processes” as well), there
 is need for a consistent methodology utilized to make sure that both access
 to and processing of them without being led to race conditions.
\end_layout

\begin_layout Subsection
Important terminology
\end_layout

\begin_layout Itemize

\series bold
Race conditions:
\series default
 A program is susceptible to race conditions, or race hazards, when the
 order in which threads execute the given instructions can have inconsistent
 influence on the outcome of the program.
 There are two main ways of maintaining consistency:
\end_layout

\begin_layout Itemize

\series bold
Mutexes: 
\series default
When a thread is about to update a variable -or entity- it obtains a lock
 designated for access to a certain memory space.
 When updating is over, the lock is released -or unlocked- again.
 While a mutex is locked, no other thread is allowed to update, or read
 a variable.
 In order to gain access to the mutex-ed variable, a thread must ask for
 it again, until it finds it an unlocked state.
 
\end_layout

\begin_layout Itemize
\noindent

\series bold
Condition variables:
\series default
 They work much like mutexes with a significant change in granting access
 to all threads.
 When a lock is unlocked after the successful update of a value, a signal
 is put out to all threads so that they can access it immediately.
 This means that no thread needs to persistently ask for permission to a
 variable until it is finally given to it.
 
\end_layout

\begin_layout Itemize
We wrap regions of the code that process an entity that’s shared among processes
 around some mutex logic.
 This region is oftentimes referred to as a 
\series bold
critical section
\series default
.
 
\end_layout

\begin_layout Section
Different multithreading schemes
\end_layout

\begin_layout Standard
Pthreads makes use of condition variables for managing critical sections,
 while openCilk is limited to mutexes
\begin_inset CommandInset citation
LatexCommand cite
key "ajkunic2012comparison"
literal "false"

\end_inset

.
 However, one important advantage of the latter is work stealing.
 More specifically, when a pthread is created, it is very strictly assigned
 a certain piece of workload.
 Work stealing introduces flexibility and dynamic scheduling to the work
 assigned to all threads.
 This is more easily understood using a cilk_for loop as an example.
 
\end_layout

\begin_layout Standard
When a thread is done with the iteration of the loop assigned to it, it
 checks if any iteration is free.
 If so, it immediately starts executing it.
 So, thread with ID 0 could be executing the body of a loop for iteration
 
\begin_inset Formula $i=10$
\end_inset

, while thread 1 could still be executing iteration 
\begin_inset Formula $i=4$
\end_inset

.
 
\end_layout

\begin_layout Standard
On the other hand, Multicilk tries to take advantage of both software architectu
res.
 Cilk threads (often called cilks) are created, with each one of them having
 the permission to delegate some piece of their work to pthreads.
 This gives Multicilk the ability to use both work stealing and condition
 variables, depending on the region of the code the programmer needs to
 optimize.
 For that reason, we have constructed, roughly, the same algorithm for all
 three of the parallelization methods in order to compare their performances.
 Below are the specifics of each procedure.
\end_layout

\begin_layout Section
Brief description of the problem
\end_layout

\begin_layout Standard
We will construct a problem that utilizes instructions for which both condition
 variables and work stealing makes sense, so that we can quantify their
 influence on the execution times.
 More specifically, our algorithm is a classic 
\series bold
producer-consumer
\series default
 problem.
 We use a cyclical array that produces random seeds (we will call this number
 alpha).
 This seed is multiplied by random numbers to form an array of a constant
 user-given size.
 At this point, the producer has completed their work.
 Now it’s up to the consumers to take that array and perform a basic linear
 algebra operation on it.
 The operations we have programmed for the purposes of this project are
 axpy and a general sum of the elements of the array, sequentially, via
 pthreads and via openCilk
\begin_inset CommandInset citation
LatexCommand cite
key "7965120"
literal "false"

\end_inset

.
\end_layout

\begin_layout Subsection
Axpy
\end_layout

\begin_layout Standard
Having two arrays, 
\begin_inset Formula $x$
\end_inset

 and 
\begin_inset Formula $y$
\end_inset

, axpy performs the operation:
\end_layout

\begin_layout Standard
\begin_inset Formula $y=a\cdot x+y$
\end_inset


\end_layout

\begin_layout Standard
where, 
\begin_inset Formula $a$
\end_inset

 is a constant value given to the operation by the program.
\end_layout

\begin_layout Subsection
Sum
\end_layout

\begin_layout Standard
Sum takes an array 
\begin_inset Formula $x$
\end_inset

 and a similar 
\begin_inset Formula $a$
\end_inset

parameter and performs:
\end_layout

\begin_layout Standard

\series bold
for
\series default
 i in size(
\begin_inset Formula $x$
\end_inset

) 
\series bold
do
\end_layout

\begin_layout Standard
\begin_inset Formula $\quad$
\end_inset


\begin_inset Formula $\quad\quad sum=sum+a\cdot x[i]$
\end_inset


\end_layout

\begin_layout Standard

\series bold
end for
\end_layout

\begin_layout Section
Algorithm implementation
\end_layout

\begin_layout Subsection
Pthreads and openCilk
\end_layout

\begin_layout Standard
The program is written to work using a number of threads -we will call it
 
\begin_inset Formula $n$
\end_inset

-.
 Let’s suppose 
\begin_inset Formula $n$
\end_inset

 = 4.
 For the first two implementations, this means 
\begin_inset Formula $n^{2}$
\end_inset

 = 16 threads will be utilized.
 All of them will be both producers and consumers.
 They will enter a for loop and produce-consume until a counter is reached.
 Every array that is produced and then consumed, increments that counter
 by one, obviously using condition variables or mutexes to maintain consistency
 and overall deterministic behavior.
 When the counter reaches a user-given constant, all threads are joined
 and the program returns.
\end_layout

\begin_layout Subsection
Multicilk
\end_layout

\begin_layout Standard
For Multicilk, we took advantage of the ability for more detailed work assignmen
t, while still maintaining some of the much-helpful concept of work stealing.
 So, n cilks are invoked, and start producing arrays.
 Each one of them can use n pthreads to consume their produced arrays.
 Again, on the completion of an arithmetic operation on an array, a counter
 is incremented, until a certain value is reached.
 Using the design above, we call the same number of threads as the simpler
 implementations, with a difference in the roles they take up.
\end_layout

\begin_layout Section
Testing
\end_layout

\begin_layout Subsection
Test parameters
\end_layout

\begin_layout Standard
The parameters given to the various resulting executables are:
\end_layout

\begin_layout Itemize
\begin_inset Formula $\mathbf{n}$
\end_inset

: Essentially the root of the number of threads to be invoked, in the fashion
 that has been mentioned above.
 
\end_layout

\begin_layout Itemize

\series bold
Size
\series default
: The size of each individual array, in elements.
 
\end_layout

\begin_layout Itemize

\series bold
Cases
\series default
: Number of arrays that must be produced and consumed.
 
\end_layout

\begin_layout Itemize

\series bold
Alpha
\series default
: The constant float value, used to perform both axpy and sum.
\end_layout

\begin_layout Subsection
Conducted tests
\end_layout

\begin_layout Standard
For the purposes of our research, we conduct tests for various sizes, number
 of threads, and number of arrays to be produced and consumed.
\end_layout

\begin_layout Subsubsection
Pthreads vs openCilk
\end_layout

\begin_layout Standard
Our main test consists of of 
\series bold
10 arrays
\series default
 of 
\series bold
sizes 1000000, 2000000, and 5000000
\series default
.
 The 
\series bold
thread numbers
\series default
 (
\begin_inset Formula $n$
\end_inset

) are 
\series bold
2, 4, 6, 8, 12, and 16
\series default
.
 We will observe the differences between the two schemes a little closer,
 for a 
\series bold
selected number of threads: 2, 4, 8, and 16
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
openCilk vs pthreads
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Graphics
	filename /Users/anestiskaimakamidis/Desktop/Screenshot 2022-10-10 at 2.19.04 PM.png
	width 15cm

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
openCilk vs pthreads
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Graphics
	filename /Users/anestiskaimakamidis/Desktop/Screenshot 2022-10-10 at 2.24.45 PM.png
	width 15cm

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
openCilk vs pthreads
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Graphics
	filename /Users/anestiskaimakamidis/Desktop/Screenshot 2022-10-10 at 2.27.13 PM.png
	width 15cm

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Benchmarks between the three schemes 
\end_layout

\begin_layout Standard
The programs construct 
\series bold
10 arrays
\series default
 of varying sizes, using 
\begin_inset Formula $n$
\end_inset

 = 4, which was shown to be the best performing parameter in the analysis
 above.
 For that parameter, we use arrays of 
\series bold
size 500000, 600000, 700000, 800000, 900000, 1000000, 2000000, 3000000,
 4000000, and 5000000.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
openCilk vs pthreads vs Multicilk
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Graphics
	filename /Users/anestiskaimakamidis/Documents/GitHub/Parallel-Distributed-Systems-part4/data/image/benchmark/4-threads.png
	width 15cm

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Section
Conclusion
\end_layout

\begin_layout Standard
The tests above show that openCilk’s work stealing feature can offer more
 room for optimization, but less potential for deterministic behavior and
 predictability.
 All pthreads implementations seem to be scaling in a more predictable and
 linear manner, at least up until a number of threads that is in par with
 the specifications of the machine on which the tests were conducted.
\end_layout

\begin_layout Standard
However, on the first batch of tests, for a large enough size, when work
 stealing actually makes sense, it is easy to see that openCilk is able
 to outperform pthreads, where the workload is statically assigned and prone
 to imbalance.
\end_layout

\begin_layout Standard
Regarding the second batch, larger sizes and more threads than the ones
 natively built into the hardware lead openCilk to larger execution times,
 while more ideal conditions render openCilk capable of outperforming pthreads
 once again.
 
\end_layout

\begin_layout Standard
Last, but not least, the 
\series bold
Multicilk comparison
\series default
 leaves much to be desired.
 Generally speaking, the conducted tests are the perfect way for the average
 programmer to realize that no scheme, paradigm or design is a panacea.
 Each one of them needs to be carefully engineered and fit into a problem
 that is fit for its advantages and hides its disadvantages.
 Multicilk needs a large number of threads, a large enough problem, and
 most importantly a vast amount of data communication between underlying
 threads.
 Even so, one could be a little skeptical about its ease and merits of use.
 This would be the reason why there is little to no bibliography found on
 the matter
\begin_inset CommandInset citation
LatexCommand cite
key "pusapaty2022combining"
literal "false"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

% References should be produced using the bibtex program from suitable
\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

% BiBTeX files (here: strings, refs, manuals).
 The IEEEbib.bst bibliography
\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout

% style file from IEEE produces unsorted bibliography list.
\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Plain Layout

% -------------------------------------------------------------------------
\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset

 
\begin_inset CommandInset bibtex
LatexCommand bibtex
btprint "btPrintCited"
bibfiles "citations"
options "IEEEbib"

\end_inset


\end_layout

\end_body
\end_document
